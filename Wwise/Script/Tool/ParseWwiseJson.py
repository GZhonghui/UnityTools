# 2022/11/16 By Zhonghui
# Wwise Version 2021.1.10.7883.2429

import json, os, sys

soundBankPlatform = 'Windows'
soundBankJsonFile = 'SoundbanksInfo.json'

cppHeaderName = 'Wwise_IDs.h'

outputCsName = 'WwiseDefine.cs'
outputLuaName = 'Lua_AD_WwiseDefine.lua'
outputJsonName = 'WwiseDefine.json'

savedBanks = dict()
savedEvents = dict()
savedDialogueEvents = dict()
savedGameParameters = dict()

def Log(*Args):
    print(*Args)

def sameObject(objX: dict, objY: dict):
    return objX['Guid'] == objY['Guid'] and objX['Name'] == objY['Name'] and objX['Bank'] == objY['Bank']

def appendWithoutSame(Id: str, pendingObj: dict, pendingTarget: dict):
    if Id in pendingTarget.keys():
        if not sameObject(pendingObj, pendingTarget[Id]):
            Log('Wwise Anly Error: Same Id Object', Id)

    else:
        pendingTarget[Id] = pendingObj

def addEvent(Event: dict, Bank: str):
    Id, Guid, Name = Event['Id'], Event['GUID'][1:-1], Event['Name']

    global savedEvents
    appendWithoutSame(Id, {'Guid': Guid, 'Name': Name, 'Bank': Bank}, savedEvents)

def addDialogueEvent(dialogueEvent: dict, Bank: str):
    Id, Guid, Name = dialogueEvent['Id'], dialogueEvent['GUID'][1:-1], dialogueEvent['Name'],

    global savedDialogueEvents
    appendWithoutSame(Id, {'Guid': Guid, 'Name': Name, 'Bank': Bank}, savedDialogueEvents)

def addGameParameter(gameParameter: dict, Bank: str):
    Id, Guid, Name = gameParameter['Id'], gameParameter['GUID'][1:-1], gameParameter['Name']

    global savedGameParameters
    appendWithoutSame(Id, {'Guid': Guid, 'Name': Name, 'Bank': Bank}, savedGameParameters)

def addBank(soundBank: dict):
    Id, Guid, Name = soundBank['Id'], soundBank['GUID'][1:-1], soundBank['ShortName']

    global savedBanks
    appendWithoutSame(Id, {'Guid': Guid, 'Name': Name, 'Bank': Id}, savedBanks)

    if 'IncludedEvents' in soundBank.keys():
        Events = soundBank['IncludedEvents']
        for i in range(len(Events)):
            addEvent(Events[i], Id)

    if 'IncludedDialogueEvents' in soundBank.keys():
        dialogueEvents = soundBank['IncludedDialogueEvents']
        for i in range(len(dialogueEvents)):
            addDialogueEvent(dialogueEvents[i], Id)

    if 'GameParameters' in soundBank.keys():
        gameParameters = soundBank['GameParameters']
        for i in range(len(gameParameters)):
            addGameParameter(gameParameters[i], Id)

def initData():
    pass

def encodeData(outputCsPath: str):
    def csCodeHead():
        return r'''
using System.Collections.Generic;
using System;

namespace AK
{
    public class WwiseDefine
    {
        public class WwiseObject
        {
            public string Name;
            public string Guid;

            public WwiseObject(string Name, string Guid)
            {
                this.Name = Name;
                this.Guid = Guid;
            }
        }

        public static Dictionary<uint, WwiseObject> dataBanks = new Dictionary<uint, WwiseObject>();
        public static Dictionary<string, uint> dataRevBanks = new Dictionary<string, uint>();
        
        public static Dictionary<uint, WwiseObject> dataEvents = new Dictionary<uint, WwiseObject>();
        public static Dictionary<string, uint> dataRevEvents = new Dictionary<string, uint>();
        
        public static Dictionary<uint, WwiseObject> dataGameParameters = new Dictionary<uint, WwiseObject>();
        public static Dictionary<string, uint> dataRevGameParameters = new Dictionary<string, uint>();

        public static void LoadDefine()
        {
'''

    def csCodeTail():
        return r'''
        }
    }
}
'''

    def luaCodeHead():
        return r'''
local AD_WwiseDefine = {}

-- Audo Generated By Python
'''

    def luaCodeTail():
        return r'''
return AD_WwiseDefine
'''

    jsonData = dict()
    csBuffer = csCodeHead()
    luaBuffer = luaCodeHead()

    # Tab = ' ' * 12

    jsonData['Banks'] = list()
    # luaBuffer = luaBuffer + 'AD_WwiseDefine.BANKS = {}\n'
    for Id in savedBanks.keys():
        Bank = savedBanks[Id]
        jsonData['Banks'].append({'Id': int(Id), 'Name': Bank['Name'], 'Guid': Bank['Guid'], 'Bank': int(Bank['Bank'])})
        # csBuffer = csBuffer + Tab + 'dataBanks.Add(%sU, new WwiseObject("%s", "%s"));\n'%(Id, Bank['Name'], Bank['Guid'])
        # csBuffer = csBuffer + Tab + 'dataRevBanks.Add("%s", %sU);\n'%(Bank['Name'], Id)
        # luaBuffer = luaBuffer + 'AD_WwiseDefine.BANKS.%s = %s\n'%(Bank['Name'], Id)
    # csBuffer = csBuffer + '\n'
    # luaBuffer = luaBuffer + '\n'

    jsonData['Events'] = list()
    # luaBuffer = luaBuffer + 'AD_WwiseDefine.EVENTS = {}\n'
    for Id in savedEvents.keys():
        Event = savedEvents[Id]
        jsonData['Events'].append({'Id': int(Id), 'Name': Event['Name'], 'Guid': Event['Guid'], 'Bank': int(Event['Bank'])})
        # csBuffer = csBuffer + Tab + 'dataEvents.Add(%sU, new WwiseObject("%s", "%s"));\n'%(Id, Event['Name'], Event['Guid'])
        # csBuffer = csBuffer + Tab + 'dataRevEvents.Add("%s", %sU);\n'%(Event['Name'], Id)
        # luaBuffer = luaBuffer + 'AD_WwiseDefine.EVENTS.%s = %s\n'%(Event['Name'], Id)
    # csBuffer = csBuffer + '\n'
    # luaBuffer = luaBuffer + '\n'

    jsonData['DialogueEvents'] = list()
    for Id in savedDialogueEvents.keys():
        dialogueEvent = savedDialogueEvents[Id]
        jsonData['DialogueEvents'].append({'Id': int(Id), 'Name': dialogueEvent['Name'], 'Guid': dialogueEvent['Guid'], 'Bank': int(dialogueEvent['Bank'])})

    jsonData['GameParameters'] = list()
    # luaBuffer = luaBuffer + 'AD_WwiseDefine.GAMEPARAMETERS = {}\n'
    for Id in savedGameParameters.keys():
        gameParameter = savedGameParameters[Id]
        jsonData['GameParameters'].append({'Id': int(Id), 'Name': gameParameter['Name'], 'Guid': gameParameter['Guid'], 'Bank': int(gameParameter['Bank'])})
        # csBuffer = csBuffer + Tab + 'dataGameParameters.Add(%sU, new WwiseObject("%s", "%s"));\n'%(Id, gameParameter['Name'], gameParameter['Guid'])
        # csBuffer = csBuffer + Tab + 'dataRevGameParameters.Add("%s", %sU);\n'%(gameParameter['Name'], Id)
        # luaBuffer = luaBuffer + 'AD_WwiseDefine.GAMEPARAMETERS.%s = %s\n'%(gameParameter['Name'], Id)
    # csBuffer = csBuffer + '\n'
    # luaBuffer = luaBuffer + '\n'

    csBuffer = csBuffer + csCodeTail()
    luaBuffer = luaBuffer + luaCodeTail()

    encodeFilePath = os.path.join(outputCsPath, outputJsonName)
    Log('Saving Result to', encodeFilePath)

    encodeFile = open(encodeFilePath, 'wt', encoding='utf-8')

    # Save Json
    encodeFile.write(json.dumps(jsonData))

    # Don't Save Cs
    # encodeFile.write(csBuffer)

    encodeFile.close()

    # Dont Save Lua Here
    # encodeFilePath = os.path.join(outputLuaPath, outputLuaName)
    # encodeFile = open(encodeFilePath, 'wt', encoding='utf-8')
    # encodeFile.write(luaBuffer)
    # encodeFile.close()

def saveJson(soundBankPath: str, outputCsPath: str):
    initData()

    jsonFilePath = os.path.join(soundBankPath, soundBankPlatform, soundBankJsonFile)

    Log('Wwise Reading Json from:', jsonFilePath)
    jsonFile = open(jsonFilePath, 'rt', encoding='utf-8')
    jsonContent = jsonFile.read()
    jsonData = json.loads(jsonContent)

    soundBanksInfo = jsonData['SoundBanksInfo']

    if 'SoundBanks' in soundBanksInfo.keys():
        soundBanks = soundBanksInfo['SoundBanks']
        for i in range(len(soundBanks)):
            addBank(soundBanks[i])

    jsonFile.close()

    encodeData(outputCsPath)

# Cpp Header -> Lua Define
def saveLua(cppHeaderPath: str, outputLuaPath: str):
    cppHeader = open(os.path.join(cppHeaderPath, cppHeaderName), 'rt', encoding='utf-8')
    luaDefine = open(os.path.join(outputLuaPath, outputLuaName), 'wt', encoding='utf-8')

    luaBuffer = r'''
-- Audo Generated By Python
local AK = {}
'''

    def removePattern(rawLine: str, Pattern: str):
        if Pattern in rawLine:
            rawLine = rawLine[:rawLine.find(Pattern)] + '\n'
        return rawLine

    iDeep = 0
    while True:
        rawLine = cppHeader.readline()
        if not rawLine: break

        rawLine = removePattern(removePattern(rawLine, '//'), '#')
        if 'namespace' in rawLine: rawLine = rawLine.replace('namespace ', '').rstrip() + ' =\n'

        rawLine = rawLine.replace('static const AkUniqueID ', '')
        rawLine = rawLine.replace('U;', ',')

        if '{' in rawLine:
            iDeep = iDeep + 1
        if '}' in rawLine:
            iDeep = iDeep - 1
            if iDeep > 0: rawLine = rawLine.replace('}', '},').rstrip() + '\n'

        if len(rawLine) > 1:
            luaBuffer = luaBuffer + rawLine

    luaBuffer = luaBuffer + r'''
return AK
'''

    cppHeader.close()

    luaDefine.write(luaBuffer)
    luaDefine.close()

if __name__ == '__main__':
    if len(sys.argv) > 1:
        unityDataPath = sys.argv[1]
        soundBankPath = os.path.join(unityDataPath, 'ArtRes', 'Bundle', 'Audio', 'Wwise', 'Banks')
        cppHeaderPath = os.path.join(unityDataPath, 'ArtRes', 'Bundle', 'Audio', 'Wwise', 'Define')
        outputCsPath = os.path.join(unityDataPath, 'ArtRes', 'Bundle', 'Audio', 'Wwise', 'Define')
        outputLuaPath = os.path.join(unityDataPath, 'ArtRes', 'Bundle', 'Audio', 'Wwise', 'Define')
        saveJson(soundBankPath, outputCsPath)
        saveLua(cppHeaderPath, outputLuaPath)
